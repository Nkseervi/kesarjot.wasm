@inject IAuthenticationService AuthService
@inject NavigationManager NavManager

<EditForm Model="model" OnValidSubmit="ExecuteLogin" class="">

	<div class="row">
		<div class="col-auto">
			<label for="email" class="sr-only">Email</label>
			<InputText id="email" class="form-control" @bind-Value="model.Email" placeholder="Email Address"></InputText>
		</div>

		<div class="col-auto">
			<label for="password" class="sr-only">Password</label>
			<InputText type="password" id="password" class="form-control" @bind-Value="model.Password" placeholder="Password"></InputText>
		</div>

		<div class="col-auto">
			<button type="submit" class="btn btn-success">Log In</button>
		</div>

		<div class="col-auto">
			<button type="button" class="btn btn-primary" @onclick="RegisterUser">Register</button>
		</div>
	</div>
	@if(showAuthenticationError)
	{
		<div class="row">
			<div class="text-danger">
				@authenticationErrorText
			</div>
		</div>
	}
</EditForm>
@code {
	private AuthenticationUserDto model = new();

	private bool showAuthenticationError = false;
	private string authenticationErrorText = string.Empty;

	private void RegisterUser()
	{
		NavManager.NavigateTo("/register");
	}

	private async Task ExecuteLogin()
	{
		showAuthenticationError = false;

		AuthenticatedUserDto result = await AuthService.Login(model);

		if(result is not null)
		{
			NavManager.NavigateTo("/");
		}
		else
		{
			authenticationErrorText = "There was an error when trying to log in.";
			showAuthenticationError = true;
		}
	}

}
